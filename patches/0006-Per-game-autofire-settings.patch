From 41f00b7325734ba72740ddd69dbadf6419384c5e Mon Sep 17 00:00:00 2001
From: Zakk <zakk@rsdio.com>
Date: Tue, 20 Apr 2021 04:12:37 -0400
Subject: [PATCH 2/2] Per game autofire settings

---
 input.cpp                  | 43 ++++++++++++++++++++++++++++++++------
 menu.cpp                   |  3 +++
 support/megacd/megacdd.cpp |  8 +++++--
 support/pcecd/pcecdd.cpp   |  8 +++++++
 user_io.cpp                | 13 ++++++++++++
 user_io.h                  |  2 ++
 6 files changed, 69 insertions(+), 8 deletions(-)

diff --git a/input.cpp b/input.cpp
index 8f5aa8f..a3c89b2 100644
--- a/input.cpp
+++ b/input.cpp
@@ -4322,17 +4322,37 @@ void parse_buttons()
 	}
 }
 
+static void input_autofire_save_filename(char *fname, size_t pathlen, bool core_only)
+{
+
+        uint32_t cd_crc = user_io_get_cd_toc_crc();
+        uint32_t file_crc = user_io_get_file_crc();
+
+        uint32_t use_crc = cd_crc ? cd_crc : file_crc;
+
+        char *conf_name = user_io_create_config_name();
+
+        if (use_crc && !core_only)
+        {
+                snprintf(fname, pathlen, "%s_%d", conf_name, use_crc);
+        } else {
+                snprintf(fname, pathlen, "%s", conf_name);
+        }
+}
 void input_autofire_save()
 {
                 char path[256] = CONFIG_DIR"/autofire/";
+                char fname[256] = {};
+
                 FileCreatePath(path);
-                strcat(path, user_io_create_config_name());
+                input_autofire_save_filename(fname, sizeof(fname), false);
+                strncat(path, fname, sizeof(path));
 
                 uint8_t *buf = new uint8_t[sizeof(auto_fire_defs)];
-		printf("SAVE FILE %s SIZE %d\n", path, sizeof(auto_fire_defs));
+                printf("SAVE FILE %s SIZE %d\n", path, sizeof(auto_fire_defs));
                 if (buf)
                 {
-			memcpy(buf, auto_fire_defs, sizeof(auto_fire_defs));
+                        memcpy(buf, auto_fire_defs, sizeof(auto_fire_defs));
                         FileSave(path, buf, sizeof(auto_fire_defs));
                         delete(buf);
                 }
@@ -4343,16 +4363,26 @@ void input_autofire_load()
 {
                 char path[256] = "autofire/";
                 uint8_t *buf = new uint8_t[sizeof(auto_fire_defs)];
+                //Load game specific autofire config first. If that fails, try just the core name
                 if (buf)
                 {
                         memset(buf, 0, sizeof(auto_fire_defs));
+                        char fname[256] = {};
+                        input_autofire_save_filename(fname, sizeof(fname), false);
 
-                        strcat(path, user_io_create_config_name());
-                        if (FileLoadConfig(path, buf, sizeof(auto_fire_defs)))
+                        strncat(path, fname, sizeof(path));
+                        if (!FileLoadConfig(path, buf, sizeof(auto_fire_defs)))
                         {
-				memcpy(auto_fire_defs, buf, sizeof(auto_fire_defs));
+                                strncpy(path, "autofire/", sizeof(path));
+                                input_autofire_save_filename(fname, sizeof(fname), true);
+                                strncat(path, fname, sizeof(path));
+                                FileLoadConfig(path, buf, sizeof(auto_fire_defs));
                         }
 
+                        //If one of the FileLoadConfig was successful, this copies it to the AF config.
+                        //If none were successful, this zeros out the auto fire config
+                        memcpy(auto_fire_defs, buf, sizeof(auto_fire_defs));
+
                         delete(buf);
                 }
 }
diff --git a/menu.cpp b/menu.cpp
index cd8bfa9..b88c700 100644
--- a/menu.cpp
+++ b/menu.cpp
@@ -2303,6 +2303,7 @@ void HandleUI(void)
 				if(!store_name) user_io_store_filename(selPath);
 				user_io_file_tx(selPath, idx, opensave, 0, 0, load_addr);
 				if (user_io_use_cheats()) cheats_init(selPath, user_io_get_file_crc());
+				input_autofire_load();
 			}
 
 			if (addon[0] == 'f' && addon[1] == '1') process_addon(addon, idx);
@@ -2329,11 +2330,13 @@ void HandleUI(void)
 			else if (is_megacd())
 			{
 				mcd_set_image(ioctl_index, selPath);
+				input_autofire_load();
 			}
 			else if (is_pce())
 			{
 				pcecd_set_image(ioctl_index, selPath);
 				cheats_init(selPath, 0);
+				input_autofire_load();
 			}
 			else
 			{
diff --git a/support/megacd/megacdd.cpp b/support/megacd/megacdd.cpp
index 3a20965..8dc08e1 100644
--- a/support/megacd/megacdd.cpp
+++ b/support/megacd/megacdd.cpp
@@ -6,6 +6,8 @@
 #include <time.h>
 
 #include "megacd.h"
+#include "miniz.h"
+#include "../../user_io.h"
 #include "../chd/mister_chd.h"
 
 #define CD_DATA_IO_INDEX 2
@@ -300,10 +302,11 @@ int cdd_t::Load(const char *filename)
 		//this->toc.sub = fopen(getFullPath(fname), "r");
 
 		printf("\x1b[32mMCD: CD mounted , last track = %u\n\x1b[0m", this->toc.last);
-
+	        uint32_t toc_crc = 0;
+		toc_crc = crc32(toc_crc, (const unsigned char *)&this->toc, sizeof(toc_t));
+		user_io_set_cd_toc_crc(toc_crc);
 		return 1;
 	}
-
 	return 0;
 }
 
@@ -337,6 +340,7 @@ void cdd_t::Unload()
 
 	memset(&this->toc, 0x00, sizeof(this->toc));
 	this->sectorSize = 0;
+	user_io_set_cd_toc_crc(0);
 }
 
 void cdd_t::Reset() {
diff --git a/support/pcecd/pcecdd.cpp b/support/pcecd/pcecdd.cpp
index c52d3de..b12a458 100644
--- a/support/pcecd/pcecdd.cpp
+++ b/support/pcecd/pcecdd.cpp
@@ -8,8 +8,10 @@
 #include "../../user_io.h"
 
 #include "../chd/mister_chd.h"
+#include "miniz.h"
 #include "pcecd.h"
 
+
 #define PCECD_DATA_IO_INDEX 2
 
 float get_cd_seek_ms(int start_sector, int target_sector);
@@ -276,6 +278,11 @@ int pcecdd_t::Load(const char *filename)
 
 		//memcpy(&fname[strlen(fname) - 4], ".sub", 4);
 		//this->toc.sub = fopen(getFullPath(fname), "r");
+		//
+
+		uint32_t toc_crc = 0;
+		toc_crc = crc32(toc_crc, (const unsigned char *)&(this->toc), sizeof(toc_t));
+		user_io_set_cd_toc_crc(toc_crc);
 
 		printf("\x1b[32mPCECD: CD mounted , last track = %u\n\x1b[0m", this->toc.last);
 		return 1;
@@ -310,6 +317,7 @@ void pcecdd_t::Unload()
 		this->loaded = 0;
 	}
 
+	user_io_set_cd_toc_crc(0);
 	memset(&this->toc, 0x00, sizeof(this->toc));
 }
 
diff --git a/user_io.cpp b/user_io.cpp
index 930fb54..702f2db 100644
--- a/user_io.cpp
+++ b/user_io.cpp
@@ -1881,11 +1881,24 @@ static void send_pcolchr(const char* name, unsigned char index, int type)
 }
 
 static uint32_t file_crc;
+static int32_t cd_toc_crc;
+
 uint32_t user_io_get_file_crc()
 {
 	return file_crc;
 }
 
+
+void user_io_set_cd_toc_crc(uint32_t crc)
+{
+        cd_toc_crc = crc;
+}
+
+uint32_t user_io_get_cd_toc_crc()
+{
+        return cd_toc_crc;
+}
+
 int user_io_use_cheats()
 {
 	return use_cheats;
diff --git a/user_io.h b/user_io.h
index 52824cf..a3addb7 100644
--- a/user_io.h
+++ b/user_io.h
@@ -194,6 +194,8 @@ uint32_t user_io_8bit_set_status(uint32_t, uint32_t, int ex = 0);
 int user_io_get_kbd_reset();
 
 uint32_t user_io_get_file_crc();
+void user_io_set_cd_toc_crc(uint32_t cd_crc);
+uint32_t user_io_get_cd_toc_crc();
 int  user_io_file_mount(const char *name, unsigned char index = 0, char pre = 0);
 char *user_io_make_filepath(const char *path, const char *filename);
 char *user_io_get_core_name(int orig = 0);
-- 
2.31.1

