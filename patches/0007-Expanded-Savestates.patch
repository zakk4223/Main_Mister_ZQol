From 6c32ada8823f95f5602c2b05211fdaf562f62691 Mon Sep 17 00:00:00 2001
From: Zakk <zakk@rsdio.com>
Date: Wed, 30 Apr 2025 18:30:33 -0400
Subject: [PATCH 07/10] 0007

---
 cfg.cpp     |   3 ++
 cfg.h       |   3 ++
 menu.cpp    | 153 +++++++++++++++++++++++++++++++++++++++++++++++++---
 menu.h      |   5 +-
 user_io.cpp |  99 ++++++++++++++++++++++++++++++++--
 user_io.h   |  10 ++++
 6 files changed, 258 insertions(+), 15 deletions(-)

diff --git a/cfg.cpp b/cfg.cpp
index a710257..f5c83cf 100644
--- a/cfg.cpp
+++ b/cfg.cpp
@@ -131,6 +131,9 @@ static const ini_var_t ini_vars[] =
 	{ "OSD_LOCK", (void*)(&(cfg.osd_lock)), STRING, 0, sizeof(cfg.osd_lock) - 1 },
 	{ "OSD_LOCK_TIME", (void*)(&(cfg.osd_lock_time)), UINT16, 0, 60 },
 	{ "DEBUG", (void *)(&(cfg.debug)), UINT8, 0, 1 },
+	{ "SS_LOAD_BIT", (void *)(&(cfg.ss_load_bit)), STRING, 0, sizeof(cfg.ss_load_bit) - 1},
+	{ "SS_SAVE_BIT", (void *)(&(cfg.ss_save_bit)), STRING, 0, sizeof(cfg.ss_save_bit) - 1},
+	{ "SS_CURRENT_SLOT", (void *)(&(cfg.ss_current_slot)), STRING, 0, sizeof(cfg.ss_current_slot) - 1},
 	{ "MAIN", (void*)(&(cfg.main)), STRING, 0, sizeof(cfg.main) - 1 },
 	{"VFILTER_INTERLACE_DEFAULT", (void*)(&(cfg.vfilter_interlace_default)), STRING, 0, sizeof(cfg.vfilter_interlace_default) - 1 },
 };
diff --git a/cfg.h b/cfg.h
index 8b2db0c..1eb3297 100644
--- a/cfg.h
+++ b/cfg.h
@@ -99,6 +99,9 @@ typedef struct {
 	char osd_lock[25];
 	uint16_t osd_lock_time;
 	char debug;
+	char ss_load_bit[8];
+	char ss_save_bit[8];
+	char ss_current_slot[15];
 	char main[1024];
 	char vfilter_interlace_default[1023];
 } cfg_t;
diff --git a/menu.cpp b/menu.cpp
index 737b04f..5ec88fa 100644
--- a/menu.cpp
+++ b/menu.cpp
@@ -211,7 +211,11 @@ enum MENU
 	MENU_ADVANCED_MAP_EDIT4,
 	MENU_ADVANCED_MAP_CAPTURE1,
 	MENU_ADVANCED_MAP_KEYCAPTURE1,
-  MENU_ADVANCED_MAP_CAPTURETIMEOUT
+  MENU_ADVANCED_MAP_CAPTURETIMEOUT,
+  MENU_SAVE_STATE1,
+  MENU_SAVE_STATE2,
+  MENU_SAVE_STATE3,
+
 };
 
 static uint32_t menustate = MENU_NONE1;
@@ -517,6 +521,7 @@ void build_advanced_map_code_str(uint16_t *abm_codes, size_t abm_size, char *cod
 }
 
 
+static bool ss_quick_load = false;
 /* the Atari core handles OSD keys competely inside the core */
 static uint32_t menu_key = 0;
 
@@ -563,7 +568,7 @@ static uint32_t menu_key_get(void)
 		else if (CheckTimer(repeat))
 		{
 			repeat = GetTimer(REPEATRATE);
-			if (GetASCIIKey(c1) || ((menustate == MENU_COMMON2) && (menusub == 17)) || ((menustate == MENU_SYSTEM2) && (menusub == 5)))
+			if (GetASCIIKey(c1) || ((menustate == MENU_COMMON2) && (menusub == 17)) || ((menustate == MENU_SYSTEM2) && (menusub == 5)) || (menustate == MENU_SAVE_STATE3))
 			{
 				c = c1;
 				hold_cnt++;
@@ -1228,7 +1233,7 @@ void HandleUI(void)
 		{
 		case KEY_F12 | UPSTROKE:
 			menu = true;
-			//menu_key_set(KEY_F12 | UPSTROKE);
+			menu_key_set(KEY_F12 | UPSTROKE);
 			if(video_fb_state()) video_menu_bg(user_io_status_get("[3:1]"));
 			video_fb_enable(0);
 			break;
@@ -1269,6 +1274,36 @@ void HandleUI(void)
 			}
 			break;
 
+      /*
+       * F8 HOLD: after some time, restore last loaded savestate
+       * F8 RELEASE: show save state menu
+       * A proper patch here should probably create a 'save_state_menu' global 
+       * that's just like 'menu'. MENU_SAVE_STATE3 would react to this to close itself etc.
+       * But that's too much patching random other things, so in the interest of not having the auto-patch
+       * fail randomly, just deal with closing and opening the menu here
+       */
+      case KEY_F8:
+        ss_quick_load = false;
+        if (menustate != MENU_SAVE_STATE1 && menustate != MENU_SAVE_STATE2)
+        {
+          menustate = MENU_SAVE_STATE3;
+        }
+        break;
+      case KEY_F8 | UPSTROKE:
+        ProgressMessage(0,0,0,0);
+        if (menustate == MENU_SAVE_STATE2 || menustate == MENU_SAVE_STATE1)
+        {
+          menustate = MENU_NONE2;
+        } else if (!ss_quick_load) {
+          menu = true;
+          saved_menustate = MENU_SAVE_STATE1;
+          menustate = MENU_NONE2;
+          ProgressMessage(0,0,0,0);
+			    if(video_fb_state()) video_menu_bg(user_io_status_get("[3:1]"));
+			    video_fb_enable(0);
+        }
+        break;
+
 			// Within the menu the esc key acts as the menu key. problem:
 			// if the menu is left with a press of ESC, then the follwing
 			// break code for the ESC key when the key is released will
@@ -7813,6 +7848,94 @@ void HandleUI(void)
 		  }
 			break;
 
+
+  case MENU_SAVE_STATE1:
+   {
+					menustate = MENU_SAVE_STATE2;
+					parentstate = MENU_SAVE_STATE1;
+					OsdSetTitle("Save States", 0);
+          char ss_descr[1024];
+          int d_status = ss_menu_get_descr(&ss_descr[1], sizeof(ss_descr)-1);
+          
+					menumask = 0x0D;
+					uint32_t n = 0;
+
+					snprintf(s, sizeof(s), " Slot %d", ss_menu_get_slot());
+          MenuWrite(n, s, menusub == n, 0); n++;
+
+          if (d_status)
+          {
+            ss_descr[0] = ' ';
+            MenuWrite(n, ss_descr, menusub == n, 0); n++;
+          } else {
+            MenuWrite(n, " <empty>", menusub == n, 0); n++;
+          }
+
+          MenuWrite(n, " Save", menusub == n, 0); n++;
+					MenuWrite(n, " Load", menusub == n, 0); n++;
+					for (int i = n; i < OsdGetSize() - 1; i++) MenuWrite(i, "", 0, 0);
+   }
+   break;
+  case MENU_SAVE_STATE2:
+   {
+     if (select || minus || plus || left || right)
+     {
+       menustate = MENU_SAVE_STATE1;
+       uint8_t curr_save_slot = ss_menu_get_slot();
+       switch(menusub)
+       {
+         case 0:
+            if (select || plus || right)
+            {
+                curr_save_slot++;
+                if (curr_save_slot > 25) curr_save_slot = 1;
+            } else if (minus || left) {
+              if (curr_save_slot == 1)
+              {
+                curr_save_slot = 25;
+              } else {
+                curr_save_slot--;
+              }
+            }
+            ss_menu_set_slot(curr_save_slot);
+           break;
+         case 2:
+           if (select)
+           {
+            ss_menu_save();
+            menustate = MENU_NONE1;
+           }
+           break;
+        case 3:
+           if (select)
+           {
+             ss_menu_load();
+             menustate = MENU_NONE1;
+           }
+           break;
+       }
+     }
+     if (menu)
+     {
+        menustate = MENU_NONE1;
+     }
+   }
+   break;
+    case MENU_SAVE_STATE3:
+      {
+
+      int load_ss = hold_cnt / 3;
+      if (load_ss > 10)
+      {
+        ss_menu_load();
+        menustate = MENU_NONE1;
+        ProgressMessage(0,0,0,0,MENU_SAVE_STATE3);
+        ss_quick_load = true;
+      } else {
+        ProgressMessage("SState", "Restoring...", hold_cnt, 60, MENU_SAVE_STATE3); 
+      }
+      }
+      break;
 		/******************************************************************/
 		/* we should never come here                                      */
 		/******************************************************************/
@@ -8122,9 +8245,9 @@ static void set_text(const char *message, unsigned char code)
 	while (l <= 7) OsdWrite(l++, "", 0, 0);
 }
 
-void InfoMessage(const char *message, int timeout, const char *title)
+void InfoMessage(const char *message, int timeout, const char *title, const int use_state)
 {
-	if (menustate <= MENU_INFO)
+	if (menustate <= MENU_INFO || menustate == MENU_SAVE_STATE3)
 	{
 		if (menustate != MENU_INFO)
 		{
@@ -8135,7 +8258,7 @@ void InfoMessage(const char *message, int timeout, const char *title)
 		set_text(message, 0);
 
 		menu_timer = GetTimer(timeout);
-		menustate = MENU_INFO;
+		menustate = use_state; 
 		HandleUI();
 		OsdUpdate();
 	}
@@ -8224,7 +8347,7 @@ static char pchar[] = { 0x8C, 0x8E, 0x8F, 0x90, 0x91, 0x7F };
 #define PROGRESS_CHARS  (int)(sizeof(pchar)/sizeof(pchar[0]))
 #define PROGRESS_MAX    ((PROGRESS_CHARS*PROGRESS_CNT)-1)
 
-void ProgressMessage(const char* title, const char* text, int current, int max)
+void ProgressMessage(const char* title, const char* text, int current, int max, const int use_state)
 {
 	static int progress;
 	if (!current && !max)
@@ -8252,6 +8375,20 @@ void ProgressMessage(const char* title, const char* text, int current, int max)
 		for (int i = 0; i <= new_progress; i++) buf[i] = (i < new_progress) ? 0x7F : c;
 		buf[PROGRESS_CNT] = 0;
 
-		InfoMessage(progress_buf, 2000, title);
+		InfoMessage(progress_buf, 2000, title, use_state);
 	}
 }
+
+
+/*
+void menu_open_savestate_osd()
+{
+  if (!user_io_osd_is_visible())
+  {
+    menu_open_savestate = true;
+  } else if (menustate == MENU_SAVE_STATE1 || menustate == MENU_SAVE_STATE2) {
+    menu_open_savestate = false;
+    menustate = MENU_NONE1;
+  }
+}
+*/
diff --git a/menu.h b/menu.h
index b69bdfb..beb62cd 100644
--- a/menu.h
+++ b/menu.h
@@ -11,8 +11,8 @@ void menu_process_save();
 void PrintDirectory(int expand = 0);
 void ScrollLongName(void);
 
-void ProgressMessage(const char* title = 0, const char* text = 0, int current = 0, int max = 0);
-void InfoMessage(const char *message, int timeout = 2000, const char *title = "Message");
+void ProgressMessage(const char* title = 0, const char* text = 0, int current = 0, int max = 0, const int use_state = 2);
+void InfoMessage(const char *message, int timeout = 2000, const char *title = "Message", const int use_state = 2);
 void Info(const char *message, int timeout = 2000, int width = 0, int height = 0, int frame = 0);
 void MenuHide();
 void SelectINI();
@@ -23,6 +23,7 @@ int menu_lightgun_cb(int idx, uint16_t type, uint16_t code, int value);
 int menu_allow_cfg_switch();
 void StoreIdx_F(int idx, const char *path);
 void StoreIdx_S(int idx, const char *path);
+void menu_open_savestate_osd();
 
 int menu_present();
 
diff --git a/user_io.cpp b/user_io.cpp
index 5cb2566..ce5c38e 100644
--- a/user_io.cpp
+++ b/user_io.cpp
@@ -39,6 +39,10 @@
 
 #include "support.h"
 
+static char ss_rom_name[1024] = {};
+static uint8_t ss_save_slot = 1;
+static bool ss_save_pending = false;
+
 static char core_path[1024] = {};
 static char rbf_path[1024] = {};
 
@@ -1882,6 +1886,7 @@ int process_ss(const char *rom_name, int enable)
 
 		FileGenerateSavestatePath(rom_name, ss_name, 1);
 		ss_sufx = ss_name + strlen(ss_name) - 4;
+    strcpy(ss_rom_name, rom_name);
 		return 1;
 	}
 
@@ -1908,12 +1913,19 @@ int process_ss(const char *rom_name, int enable)
 					MenuHide();
 					Info("Saving the state", 500);
 
-					*ss_sufx = i + '1';
-					if (FileOpenEx(&f, ss_name, O_CREAT | O_TRUNC | O_RDWR | O_SYNC))
+          char save_name[1024];
+          if (ss_save_pending)
+          {
+            FileGenerateSavestatePath(ss_rom_name, save_name, ss_save_slot);  
+          } else {
+					  *ss_sufx = i + '1';
+            strcpy(save_name, ss_name);
+          }
+					if (FileOpenEx(&f, save_name, O_CREAT | O_TRUNC | O_RDWR | O_SYNC))
 					{
 						int ret = FileWriteAdv(&f, base[i], size);
 						FileClose(&f);
-						printf("Wrote %d bytes to file: %s\n", ret, ss_name);
+						printf("Wrote %d bytes to file: %s base %d\n", ret, ss_name, ss_base);
 					}
 					else
 					{
@@ -4001,10 +4013,10 @@ void user_io_kbd(uint16_t key, int press)
 			{
 				if (is_menu() && !video_fb_state()) printf("PS2 code(make)%s for core: %d(0x%X)\n", (code & EXT) ? "(ext)" : "", code & 255, code & 255);
 				if (!osd_is_visible && !is_menu() && key == KEY_MENU && press == 3) open_joystick_setup();
-				else if ((has_menu() || osd_is_visible || (get_key_mod() & (LALT | RALT | RGUI | LGUI))) && (((key == KEY_F12) && ((!is_x86() && !is_pcxt() && !is_archie()) || (get_key_mod() & (RGUI | LGUI)))) || key == KEY_MENU))
+				else if ((has_menu() || osd_is_visible || (get_key_mod() & (LALT | RALT | RGUI | LGUI))) && (((key == KEY_F12 || key == KEY_F8) && ((!is_x86() && !is_pcxt() && !is_archie()) || (get_key_mod() & (RGUI | LGUI)))) || key == KEY_MENU))
 				{
 					//block_F12 = 1;
-					if (press == 1) menu_key_set(KEY_F12);
+					if (press == 1) menu_key_set(key);
 				}
 				else if (osd_is_visible)
 				{
@@ -4222,3 +4234,80 @@ void user_io_screenshot_cmd(const char *cmd)
 
 	user_io_screenshot(cmd,0);
 }
+
+
+
+bool core_has_save_states()
+{
+  return (ss_base != 0 && cfg.ss_save_bit[0]);
+}
+
+
+static int current_core_save_slot()
+{
+  if (cfg.ss_current_slot[0])
+  {
+      return user_io_status_get(cfg.ss_current_slot, 0);
+  }
+
+  return -1;
+}
+
+
+int ss_menu_get_descr(char *descr, int descr_sz)
+{
+  char ss_name[1024] = {};
+  if (!ss_base || !ss_rom_name[0]) return 0;
+  FileGenerateSavestatePath(ss_rom_name, ss_name, ss_save_slot);
+  if (!FileExists(ss_name)) return 0;
+  struct stat64 *st = getPathStat(ss_name);
+  snprintf(descr, descr_sz, "%s", ctime(&st->st_mtime));
+  return 1;
+}
+
+void ss_menu_load()
+{
+  char ss_name[1024] = {};
+  fileTYPE ss_file;
+  uint32_t map_addr = 0;
+  int current_core_slot = current_core_save_slot(); 
+  if (!cfg.ss_save_bit[0]) return;
+  if (!ss_base || current_core_slot == -1) return;
+
+  FileGenerateSavestatePath(ss_rom_name, ss_name, ss_save_slot);
+  if (!FileExists(ss_name)) return;
+  if (!FileOpen(&ss_file, ss_name)) return;
+  map_addr = ss_base + (ss_size * current_core_slot);
+  if (!map_addr) return;
+  void *ssmap = shmem_map(map_addr, ss_size);
+  if (!ssmap) return;
+  FileReadAdv(&ss_file, ssmap, ss_size);
+  FileClose(&ss_file);
+	*(uint32_t*)(ssmap) = 0xFFFFFFFF;
+  shmem_unmap(ssmap, ss_size);
+  user_io_status_set(cfg.ss_load_bit, 1);
+  user_io_status_set(cfg.ss_load_bit, 0);
+}
+
+void ss_menu_set_slot(uint8_t slot)
+{
+  ss_save_slot = slot;
+}
+
+uint8_t ss_menu_get_slot()
+{
+  return ss_save_slot;
+}
+
+
+void ss_menu_save()
+{
+
+  if (!cfg.ss_save_bit[0]) return;
+
+  ss_save_pending = true;
+  user_io_status_set(cfg.ss_save_bit, 1);
+  user_io_status_set(cfg.ss_save_bit, 0);
+}
+
+
diff --git a/user_io.h b/user_io.h
index 6802160..038a37d 100644
--- a/user_io.h
+++ b/user_io.h
@@ -286,6 +286,16 @@ char is_pcxt();
 char is_n64();
 char is_uneon();
 
+
+void ss_menu_load();
+void ss_menu_save();
+void ss_menu_set_slot(uint8_t slot);
+uint8_t ss_menu_get_slot();
+int ss_menu_get_descr(char *descr, int descr_sz);
+bool core_has_save_states();
+
+
+
 #define HomeDir(x) user_io_get_core_path(x)
 #define CoreName user_io_get_core_name()
 #define CoreName2 user_io_get_core_name2()
-- 
2.49.0

