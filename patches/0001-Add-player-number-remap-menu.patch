From 3cf3e83e7c34dfa30f03aa0f5f59df111b479784 Mon Sep 17 00:00:00 2001
From: Zakk <zakk@rsdio.com>
Date: Thu, 20 Feb 2025 03:51:53 -0500
Subject: [PATCH 1/9] 0001

---
 input.cpp | 143 ++++++++++++++++++++++++++++++++++++++++++++
 input.h   |  10 ++++
 menu.cpp  | 173 +++++++++++++++++++++++++++++++++++++++++++++++++++++-
 3 files changed, 323 insertions(+), 3 deletions(-)

diff --git a/input.cpp b/input.cpp
index 1fc63d7..5770ab1 100644
--- a/input.cpp
+++ b/input.cpp
@@ -1406,6 +1406,75 @@ static int tmp_axis_n = 0;
 
 static int grabbed = 1;
 
+static int last_input_dev = 1<<31;
+static int last_pdsp_dev = 1<<31;
+static int player_num_remapping = 0;
+static int remapping_spinner_input = 0;
+
+
+int get_dev_num(int dev)
+{
+	return input[dev].num;
+}
+
+
+int get_pad_mask()
+{
+	int ret = 0;
+	for (int i = 0; i < NUMDEV; i++)
+	{
+		if (input[i].num && input[i].quirk != QUIRK_PDSP && input[i].quirk != QUIRK_MSSP)
+		{
+
+			ret |= 1<<i;
+		}
+	}
+
+	return ret;
+}
+
+int get_pdsp_mask()
+{
+	int ret = 0;
+	for (int i = 0; i < NUMDEV; i++)
+	{
+		if (input[i].num && (input[i].quirk == QUIRK_PDSP || input[i].quirk == QUIRK_MSSP))
+		{
+			ret |= 1<<i;
+		}
+	}
+	return ret;
+}
+
+int get_last_pdsp_dev()
+{
+	return last_pdsp_dev;
+}
+int get_last_input_dev()
+{
+	return last_input_dev;
+}
+
+int get_numplayers()
+{
+	return NUMPLAYERS;
+}
+
+int get_remap_spinner_value()
+{
+	return remapping_spinner_input;
+}
+
+void start_player_remapping()
+{
+	player_num_remapping = 1;
+}
+
+void end_player_remapping()
+{
+	player_num_remapping = 0;
+}
+
 void start_map_setting(int cnt, int set)
 {
 	mapping_current_key = 0;
@@ -2344,6 +2413,7 @@ void reset_players()
 	}
 	memset(player_pad, 0, sizeof(player_pad));
 	memset(player_pdsp, 0, sizeof(player_pdsp));
+	last_input_dev = 0;
 }
 
 static void store_player(int num, int dev)
@@ -2462,6 +2532,51 @@ static void setup_deadzone(struct input_event* ev, int dev)
 	}
 }
 
+void swap_player(int cur_dev, int new_num)
+{
+
+        int dest_dev = -1;
+	int cur_num = input[cur_dev].num;
+	bool is_pdsp = false;
+	if (input[cur_dev].quirk == QUIRK_PDSP || input[cur_dev].quirk == QUIRK_MSSP)
+	{
+		is_pdsp = true;
+	}
+
+        for (int i = 0; i < NUMDEV; i++)
+        {
+                if (input[i].num == new_num)
+                {
+			if (input[i].quirk == QUIRK_PDSP || input[i].quirk == QUIRK_MSSP)
+			{
+
+				if (is_pdsp)
+				{
+					dest_dev = i;
+					break;
+				}
+			} else if (!is_pdsp) {
+				dest_dev = i;
+				break;
+			}
+                }
+        }
+
+	if (cur_dev < 0)
+	{
+		return;
+	}
+        input[cur_dev].num = new_num;
+        store_player(new_num, cur_dev);
+        //Swap if there was already one assigned there
+        if (dest_dev > -1)
+        {
+                input[dest_dev].num = cur_num;
+                store_player(cur_num, dest_dev);
+        }
+}
+
+
 void unflag_players()
 {
 	for (int k = 1; k < NUMPLAYERS; k++)
@@ -3149,6 +3264,13 @@ static void input_cb(struct input_event *ev, struct input_absinfo *absinfo, int
 			if (ev->code < 1024 && input[dev].jkmap[ev->code] && !user_io_osd_is_visible()) ev->code = input[dev].jkmap[ev->code];
 
 			//joystick buttons, digital directions
+			/*
+			if (player_num_remapping && input[dev].num)
+			{
+				printf("SET LAST INPUT %d %s\n", dev, input[dev].name);
+				last_input_dev = dev;
+			}*/
+
 			if (ev->code >= 256)
 			{
 				if (input[dev].lightgun_req && !user_io_osd_is_visible())
@@ -3167,6 +3289,11 @@ static void input_cb(struct input_event *ev, struct input_absinfo *absinfo, int
 
 				if (user_io_osd_is_visible() || video_fb_state())
 				{
+					if (player_num_remapping && input[dev].num)
+					{
+						last_input_dev = dev;
+					}
+
 					if (ev->value <= 1)
 					{
 						if ((input[dev].mmap[SYS_BTN_MENU_FUNC] & 0xFFFF) ?
@@ -3442,6 +3569,10 @@ static void input_cb(struct input_event *ev, struct input_absinfo *absinfo, int
 
 		//analog joystick
 		case EV_ABS:
+			if (player_num_remapping && (input[dev].quirk == QUIRK_MSSP || input[dev].quirk == QUIRK_PDSP) )
+			{
+				last_pdsp_dev = dev;
+			}
 			if (!user_io_osd_is_visible())
 			{
 				int value = ev->value;
@@ -3564,6 +3695,12 @@ static void input_cb(struct input_event *ev, struct input_absinfo *absinfo, int
 
 		// spinner
 		case EV_REL:
+			if (player_num_remapping)
+			{
+				last_pdsp_dev = dev;
+				remapping_spinner_input = ev->value < 0 ? -1 : 1;
+			}
+
 			if (!user_io_osd_is_visible() && ev->code == 7)
 			{
 				if (input[dev].num && input[dev].num <= NUMPLAYERS)
@@ -4661,6 +4798,11 @@ int input_test(int getchar)
 	struct input_event ev;
 	static uint32_t timeout = 0;
 
+	if (remapping_spinner_input != 0)
+	{
+		remapping_spinner_input = 0;
+	}
+
 	if (touch_rel && CheckTimer(touch_rel))
 	{
 		touch_rel = 0;
@@ -5371,6 +5513,7 @@ int input_test(int getchar)
 								if (is_menu() && !video_fb_state())
 								{
 									/*
+									 *
 									if (mapping && mapping_type <= 1 && !(ev.type==EV_KEY && ev.value>1))
 									{
 										static char str[64], str2[64];
diff --git a/input.h b/input.h
index 892cbf1..e89dc98 100644
--- a/input.h
+++ b/input.h
@@ -93,6 +93,16 @@ uint16_t get_map_pid();
 int has_default_map();
 void send_map_cmd(int key);
 void reset_players();
+void swap_player(int dev_num, int new_num);
+void start_player_remapping();
+void end_player_remapping();
+int get_last_pdsp_dev();
+int get_last_input_dev();
+int get_pad_mask();
+int get_pdsp_mask();
+int get_dev_num(int dev);
+int get_remap_spinner_value();
+int get_numplayers();
 
 uint32_t get_key_mod();
 uint32_t get_ps2_code(uint16_t key);
diff --git a/menu.cpp b/menu.cpp
index a096b22..547ea0e 100644
--- a/menu.cpp
+++ b/menu.cpp
@@ -110,6 +110,7 @@ enum MENU
 	MENU_JOYKBDMAP,
 	MENU_JOYKBDMAP1,
 	MENU_JOYKBDMAP2,
+	MENU_JOYNUMREMAP,
 	MENU_KBDMAP,
 	MENU_KBDMAP1,
 	MENU_KBDMAP2,
@@ -2542,7 +2543,7 @@ void HandleUI(void)
 				s[28] = 0;
 				MenuWrite(n++, s, menusub == 2, 0);
 				MenuWrite(n++, " Button/Key remap          \x16", menusub == 3, 0);
-				MenuWrite(n++, " Reset player assignment", menusub == 4, 0);
+				MenuWrite(n++, " Change player assignment", menusub == 4, 0);
 
 				if (user_io_get_uart_mode())
 				{
@@ -2673,8 +2674,9 @@ void HandleUI(void)
 				break;
 
 			case 4:
-				reset_players();
-				menustate = MENU_NONE1;
+        start_player_remapping();
+        menustate = MENU_JOYNUMREMAP;
+        menusub = 0;
 				break;
 
 			case 5:
@@ -4016,6 +4018,171 @@ void HandleUI(void)
 		}
 		break;
 
+	case MENU_JOYNUMREMAP:
+		{
+		OsdSetTitle("Remap assignments", 0);
+		menumask = 0;
+		uint32_t entry = 0;
+		uint32_t selentry = 0;
+
+		parentstate = menustate;
+		uint32_t pad_start = ~0;
+		uint32_t  pad_end = ~0;
+		uint32_t  pdsp_start = ~0;
+		uint32_t  pdsp_end = ~0;
+
+
+		for (int i = 0; i < OsdGetSize(); i++) OsdWrite(i);
+		MenuWrite(entry, "Joypad remap", 0, 0);
+		entry++;
+
+		int pad_mask = get_pad_mask();
+		int pad_cnt = 0;
+		int pad_input_dev = get_last_input_dev();
+		for (int i = 0; i < 32 ; i++)
+		{
+			char buf[100];
+			if (pad_mask & 1<<i)
+			{
+				if (pad_start == (uint32_t)~0)
+				{
+					pad_start = selentry;
+				}
+				pad_cnt++;
+				sprintf(buf, "%sJoypad %d:  Player %d", i == pad_input_dev ? "*" : " ", pad_cnt, get_dev_num(i));
+				MenuWrite(entry, buf, menusub == selentry, 0);
+				entry++;
+				selentry++;
+				menumask = (menumask << 1) | 1;
+			}
+		}
+
+		pad_end = selentry-1;
+
+
+		MenuWrite(entry++, "", 0, 0);
+		MenuWrite(entry++, "Spinner/Paddle remap", 0, 0);
+		int pdsp_mask = get_pdsp_mask();
+		int pdsp_cnt = 0;
+		int pdsp_input_dev = get_last_pdsp_dev();
+		for (int i = 0; i < 32; i++)
+		{
+			char buf[100];
+			if (pdsp_mask & 1<<i)
+			{
+				pdsp_cnt++;
+				sprintf(buf, "%sSpinner %d: Player %d", i == pdsp_input_dev ? "*" : " ", pdsp_cnt, get_dev_num(i));
+				if (pdsp_start == (uint32_t)~0)
+				{
+					pdsp_start = selentry;
+				}
+				MenuWrite(entry, buf, menusub == selentry, 0);
+				entry++;
+				selentry++;
+				menumask = (menumask << 1) | 1;
+
+			}
+		}
+
+		pdsp_end = selentry-1;
+		OsdWrite(entry++, "");
+		MenuWrite(entry, "Reset All Assignments", menusub == selentry, 0);
+		uint32_t reset_sub = selentry;
+		entry++;
+		selentry++;
+		menumask = (menumask << 1) | 1;
+		entry = OsdGetSize() - 1;
+		MenuWrite(entry, "            back", menusub == selentry, 0, 0);
+		menusub_last = selentry;
+		selentry++;
+		menumask = (menumask << 1) | 1;
+
+		parentstate = MENU_JOYNUMREMAP;
+		saved_menustate = MENU_COMMON1;
+		if (back) {
+			end_player_remapping();
+			menustate = MENU_COMMON1;
+			saved_menustate = 0;
+			menusub = 0;
+		} else if (menu) {
+			end_player_remapping();
+			menustate = MENU_NONE1;
+			menusub = 0;
+		}
+
+		bool menu_pad = false;
+		bool menu_pdsp = false;
+		if (menusub >= pad_start && menusub <= pad_end)
+		{
+			menu_pad = true;
+		} else if (menusub >= pdsp_start && menusub <= pdsp_end) {
+			menu_pdsp = true;
+		} else if (menusub == reset_sub) {
+			if (select)
+			{
+				reset_players();
+				break;
+			}
+		} else if (menusub == menusub_last && select) {
+			end_player_remapping();
+			menustate = MENU_COMMON1;
+			saved_menustate = 0;
+			menusub = 0;
+		}
+
+		if (menu_pad || menu_pdsp)
+		{
+			int use_start = menu_pad ? pad_start : pdsp_start;
+			int use_mask = menu_pad ? pad_mask : pdsp_mask;
+
+			int dev_cnt = 0;
+			int dev_pos = menusub - use_start + 1;
+			int sel_dev = 1<<31;
+			for(int i = 0; i < 32; i++)
+			{
+				if (use_mask & 1<<i)
+				{
+					dev_cnt++;
+				}
+				if (dev_pos == dev_cnt)
+				{
+					sel_dev = i;
+					break;
+				}
+			}
+
+
+			if (sel_dev != 1<<31)
+			{
+				int cur_pnum = get_dev_num(sel_dev);
+				int new_pnum = cur_pnum;
+				if (right || plus || select)
+				{
+					new_pnum++;
+					if (new_pnum > 6)
+					{
+						new_pnum = 1;
+					}
+
+				} else if (left || minus) {
+					new_pnum--;
+					if (new_pnum < 1)
+					{
+						new_pnum = 6;
+					}
+				}
+
+				if (cur_pnum != new_pnum)
+				{
+					swap_player(sel_dev, new_pnum);
+				}
+			}
+
+
+		}
+		}
+		break;
+
 	case MENU_JOYKBDMAP:
 		helptext_idx = 0;
 		menumask = 1;
-- 
2.48.1

