From 583ba0752166028196eec040a49a1f8cd3d0ad3c Mon Sep 17 00:00:00 2001
From: Zakk <zakk@rsdio.com>
Date: Mon, 31 Mar 2025 04:54:18 -0400
Subject: [PATCH 5/9] 0005

---
 frame_timer.cpp | 40 ++++++++++++++++++++
 frame_timer.h   |  1 +
 input.cpp       | 99 ++++++++++++++++++++++++++++++++++++++++++++++++-
 input.h         | 13 ++++++-
 menu.cpp        | 66 ++++++++++++++++++++++++++++++++-
 scaler.cpp      | 26 +++++++++++++
 scaler.h        |  4 +-
 video.cpp       |  5 +++
 video.h         |  1 +
 9 files changed, 250 insertions(+), 5 deletions(-)
 create mode 100644 frame_timer.cpp
 create mode 100644 frame_timer.h

diff --git a/frame_timer.cpp b/frame_timer.cpp
new file mode 100644
index 0000000..0803b15
--- /dev/null
+++ b/frame_timer.cpp
@@ -0,0 +1,40 @@
+
+#include "hardware.h"
+#include "scaler.h"
+#include "video.h"
+
+static int current_frame = -1;
+static unsigned long current_timer = 0;
+static mister_scaler *scaler_inst = NULL;
+
+int GetCurrentFrame()
+{
+
+  if (!scaler_inst)
+  {
+    scaler_inst = mister_scaler_init();
+  }
+  if (current_frame == -1)
+  {
+    current_frame = mister_scaler_frame_counter(scaler_inst);
+    return current_frame;
+  }
+
+  //Don't start using the timer until we've seen at least one frame transition.
+
+
+  if (CheckTimer(current_timer))
+  {
+    int frame_num = mister_scaler_frame_counter(scaler_inst);
+    if (frame_num != current_frame)
+    {
+      float frame_ms = video_get_vtime_ms();
+      //Try 80% of frame time...
+      frame_ms*=0.80;
+      current_timer = GetTimer((unsigned long)frame_ms); 
+      current_frame = frame_num;
+    }
+  }
+  return current_frame;
+
+}
diff --git a/frame_timer.h b/frame_timer.h
new file mode 100644
index 0000000..e1b0717
--- /dev/null
+++ b/frame_timer.h
@@ -0,0 +1 @@
+int GetCurrentFrame();
diff --git a/input.cpp b/input.cpp
index d2e2f89..a45f671 100644
--- a/input.cpp
+++ b/input.cpp
@@ -31,6 +31,7 @@
 #include "support.h"
 #include "profiling.h"
 #include "gamecontroller_db.h"
+#include "frame_timer.h"
 #include "str_util.h"
 
 #define NUMDEV 30
@@ -38,6 +39,7 @@
 #define UINPUT_NAME "MiSTer virtual input"
 
 bool update_advanced_state(int devnum, uint16_t evcode, int evstate, int osd_event);
+static void input_advanced_framecheck();
 bool osd_inhibit_next_release = false;
 
 char joy_bnames[NUMBUTTONS][32] = {};
@@ -6029,6 +6031,7 @@ int input_poll(int getchar)
 	static uint32_t send_prev[NUMPLAYERS] = {};
 
 	int ret = input_test(getchar);
+  input_advanced_framecheck();
 	if (getchar) return ret;
 
 	uinp_check_key();
@@ -6290,6 +6293,8 @@ static void advanced_convert_jkmap(int devnum)
 static void process_abm_entry(advancedButtonMap *abm, advancedButtonState *abs, int devnum, int pnum)
 {
 	uint64_t joy_sav = 0;
+  if (abs->autofire_state == AF_BUTTON_DELAY) return;
+
 	if (pnum >= 0)
 	{
 		joy_sav = joy[pnum];
@@ -6344,6 +6349,93 @@ static void process_abm_entry(advancedButtonMap *abm, advancedButtonState *abs,
 	}
 }
 
+
+static void input_advanced_framecheck()
+{
+
+  //joy_adv[pnum] needs adjusting for autofire. However, it also needs to preserve
+  //any current non-autofire state. Instead of calling process_abm_entry, just use the current
+  //mask state to twiddle bits. 
+  //This (probably?) means autofiring something that doesn't result in a button being sent to the
+  //core won't work. What weird stuff are you doing that you are autofiring a system shortcut? No.
+
+  static int cur_frame_val = -1;
+
+  int saved_frame_val = cur_frame_val;
+  cur_frame_val = GetCurrentFrame();
+  if (saved_frame_val == -1 || saved_frame_val == cur_frame_val) return;
+
+
+	for (int devnum = 0; devnum < NUMDEV; devnum++)
+	{
+
+	  int pnum = input[devnum].num -1;
+	  if (!input[devnum].num) {
+		  int kbd_emu = user_io_get_kbdemu();
+		  if (kbd_emu == EMU_JOY0)
+			  pnum = 0;
+		  else if (kbd_emu == EMU_JOY1)
+			  pnum = 1;
+	  }
+
+    uint32_t no_autofire_mask = 0;
+    uint32_t autofire_mask = 0;
+
+  	for (uint i = 0; i < ADVANCED_MAP_MAX; i++)
+	  {
+		  advancedButtonMap *abm = &input[devnum].advanced_map[i];
+  		advancedButtonState *abs = &input[devnum].advanced_state[i];
+      bool has_autofire = abm->on_frames && abm->off_frames;
+
+      if (!has_autofire)
+      {
+        no_autofire_mask |= abs->current_mask;
+        continue;
+      }
+
+      if (!abs->pressed)
+      {
+        abs->cur_state_frames = 0;
+        continue;
+      }
+
+      abs->cur_state_frames++;
+
+
+      if(abs->autofire_state == AF_BUTTON_ON)
+      {
+        if (abs->cur_state_frames > abm->on_frames)
+        {
+          abs->cur_state_frames = 1;
+          abs->autofire_state = AF_BUTTON_OFF;
+          if (pnum >= 0) autofire_mask &= ~abs->current_mask;
+        }
+      } else if (abs->autofire_state == AF_BUTTON_OFF) {
+        if (abs->cur_state_frames > abm->off_frames)
+        {
+          abs->cur_state_frames = 1;
+          abs->autofire_state = AF_BUTTON_ON;
+          if (pnum >= 0) autofire_mask |= abs->current_mask; 
+        }
+      } else if (abs->autofire_state == AF_BUTTON_DELAY) {
+        if (abs->cur_state_frames > abm->delay_frames)
+        {
+          abs->cur_state_frames = 1;
+          abs->autofire_state = AF_BUTTON_ON;
+          process_abm_entry(abm, abs, devnum, pnum);
+        }
+      }
+
+      //Add support for AF_BUTTON_DELAY
+
+    }
+
+    if (pnum >= 0)
+    {
+      joy_adv[pnum] = autofire_mask | no_autofire_mask;
+    }
+  }
+}
 //TODO:
 //any way to shorten/cleanup this function and process_abm_entry
 //same for the menu functions
@@ -6472,6 +6564,11 @@ bool update_advanced_state(int devnum, uint16_t evcode, int evstate, int osd_eve
 
 		if (abs->pressed != abs->last_pressed) 
 		{
+      if (abm->delay_frames)
+      {
+        abs->autofire_state = AF_BUTTON_DELAY;
+      }
+
 			if (pnum >= 0 && abs->autofire && !abs->pressed)
 			{
 				af_disable |= abs->current_mask;
@@ -6501,7 +6598,7 @@ bool update_advanced_state(int devnum, uint16_t evcode, int evstate, int osd_eve
 				else
 					af_force_disable |= abs->current_mask;
 			}
-			joy_adv[pnum] |= abs->current_mask;
+			if (abs->autofire_state != AF_BUTTON_DELAY) joy_adv[pnum] |= abs->current_mask;
 		}
 	}
 
diff --git a/input.h b/input.h
index 16f7187..fe2611b 100644
--- a/input.h
+++ b/input.h
@@ -79,13 +79,24 @@ typedef struct {
         uint32_t button_mask;
 				uint16_t output_codes[4];
         uint16_t input_codes[4];
+        uint8_t on_frames;
+        uint8_t off_frames;
+        uint8_t delay_frames;
 } advancedButtonMap;
 
 
-typedef struct {
+typedef enum
+{
+  AF_BUTTON_ON = 0,
+  AF_BUTTON_OFF,
+  AF_BUTTON_DELAY
+} advancedAutofireState;
 
+typedef struct {
 	uint8_t input_state;
 	uint32_t current_mask;
+  uint8_t cur_state_frames;
+  advancedAutofireState autofire_state;
 	uint8_t pressed : 1;
 	uint8_t last_pressed : 1;
 	uint8_t autofire : 1;
diff --git a/menu.cpp b/menu.cpp
index d6a8188..15deb96 100644
--- a/menu.cpp
+++ b/menu.cpp
@@ -7442,6 +7442,7 @@ void HandleUI(void)
 					advancedButtonMap *edit_abm = abms+abm_edit_idx;
 					int mapped_button_cnt = 0;
 					int first_map_idx = -1;
+          bool has_autofire = edit_abm->on_frames && edit_abm->off_frames;
 				  bool dev_kbd = device_is_keyboard(abm_dev_num);
 					for (uint bn = 0; bn < sizeof(edit_abm->button_mask)*8; bn++)
 					{
@@ -7486,6 +7487,26 @@ void HandleUI(void)
 					MenuWrite(n, s, menusub == n, 0);
 				  menumask |= 1 << n++; 
 
+          snprintf(s, sizeof(s), " Autofire %s", has_autofire ? "ON": "OFF");
+          MenuWrite(n, s, menusub == n, 0);
+          menumask |= 1 << n++;
+          
+          snprintf(s, sizeof(s), " On Frames %-14d\x10 \x11", edit_abm->on_frames);
+          MenuWrite(n, s, menusub == n, !has_autofire);
+          if (has_autofire) menumask |= 1 << n;
+          n++;
+
+          snprintf(s, sizeof(s), " Off Frames %-13d\x10 \x11", edit_abm->off_frames);
+          MenuWrite(n, s, menusub == n, !has_autofire);
+          if (has_autofire) menumask |= 1 << n;
+          n++;
+
+          snprintf(s, sizeof(s), " Delay Frames %-11d\x10 \x11", edit_abm->delay_frames);
+          MenuWrite(n, s, menusub == n);
+          menumask |= 1 << n;
+          n++;
+
+
 					MenuWrite(n, " Delete", menusub == n, 0);
 				  menumask |= 1 << n++; 
 					MenuWrite(n, " Done", menusub == n, 0);
@@ -7501,6 +7522,7 @@ void HandleUI(void)
 						menustate = MENU_ADVANCED_MAP_EDIT1;
 						advancedButtonMap *abms = get_advanced_map_defs(abm_dev_num);
 						advancedButtonMap *edit_abm = abms+abm_edit_idx;
+            bool has_autofire = edit_abm->on_frames && edit_abm->off_frames;
             char bname[32] = {0};
 						switch(menusub)
 							{
@@ -7571,7 +7593,47 @@ void HandleUI(void)
 									}
 									break;
 								
-							case 3:
+              case 3:
+                if (select)
+                {
+                  if (has_autofire)
+                  {
+                    edit_abm->off_frames = edit_abm->on_frames = 0;
+                    
+                  } else {
+                    edit_abm->off_frames = edit_abm->on_frames = 1;
+                  }
+                }
+                break;
+
+              case 4:
+                if (select || right)
+                {
+                  edit_abm->on_frames++;
+                } else if (left) {
+                  edit_abm->on_frames--;
+                }
+                break;
+
+              case 5:
+                if (select || right)
+                {
+                  edit_abm->off_frames++;
+                } else if (left) {
+                  edit_abm->off_frames--;
+                }
+                break;
+
+              case 6:
+                if (select || right)
+                {
+                  edit_abm->delay_frames++;
+                } else if (left) {
+                  edit_abm->delay_frames--;
+                }
+                break;
+
+							case 7:
 									if (select)
 									{
 										menustate = MENU_ADVANCED_MAP_LIST1;
@@ -7581,7 +7643,7 @@ void HandleUI(void)
 										input_advanced_save(abm_dev_num);
 									}
 									break;
-								case 4:
+								case 8:
 									if (select)
 									{
 										menustate = MENU_ADVANCED_MAP_LIST1;
diff --git a/scaler.cpp b/scaler.cpp
index d04ad1b..0a2ab63 100644
--- a/scaler.cpp
+++ b/scaler.cpp
@@ -149,3 +149,29 @@ int mister_scaler_read_32(mister_scaler *ms, unsigned char *gbuf) {
 
     return 0;
 }
+
+int mister_scaler_frame_counter(mister_scaler *ms)
+{
+  if (!ms)
+  {
+          return 0;
+  }
+
+
+  volatile unsigned char *buffer = (unsigned char *)(ms->map+ms->map_off);
+	volatile unsigned char fc1, fc2, fc3, fc4, fc5;
+	//The scaler updates each header for the triple buffers separately, so we need to grab all of them
+	//Stupid: the headers can be at either base+0x200000/0x400000 or 0x800000/0x1000000
+	//since ram isn't cleared on core loads, the headers (other than the frame counter) may look the same as 'used' ones
+	//even though they aren't. just use all of them. unused extra buffers will not change
+	//Each frame counter is three bits.
+	fc1 = (buffer[5]>>5) & 0x07;
+	fc2 = (buffer[0x200005]>>5) & 0x07;
+	fc3 = (buffer[0x400005]>>5) & 0x07;
+	fc4 = (buffer[0x800005]>>5) & 0x07;
+	fc5 = (buffer[0x1000005]>>5) & 0x07;
+  return (fc1 | (fc2 << 3) | (fc3 << 6) | (fc4 << 9) | (fc5 << 12));
+}
+
+
+
diff --git a/scaler.h b/scaler.h
index 3eb4084..e8f86d9 100644
--- a/scaler.h
+++ b/scaler.h
@@ -20,12 +20,14 @@ typedef struct {
 } mister_scaler;
 
 #define MISTER_SCALER_BASEADDR     0x20000000
-#define MISTER_SCALER_BUFFERSIZE   2048*3*1024
+#define MISTER_SCALER_BUFFERSIZE   2048*3*4096
 
 mister_scaler *mister_scaler_init();
 int mister_scaler_read(mister_scaler *,unsigned char *buffer);
 int mister_scaler_read_32(mister_scaler *ms, unsigned char *buffer);
 int mister_scaler_read_yuv(mister_scaler *ms,int,unsigned char *y,int, unsigned char *U,int, unsigned char *V);
 void mister_scaler_free(mister_scaler *);
+int mister_scaler_frame_counter(mister_scaler *ms);
+
 
 #endif
diff --git a/video.cpp b/video.cpp
index 0878034..47462c0 100644
--- a/video.cpp
+++ b/video.cpp
@@ -3928,4 +3928,9 @@ int video_get_rotated()
   return current_video_info.rotated;
 }
 
+float video_get_vtime_ms()
+{
+  return current_video_info.vtime*1000/(float)100000000;
+}
+
 
diff --git a/video.h b/video.h
index e8e7cb7..50f10e9 100644
--- a/video.h
+++ b/video.h
@@ -51,6 +51,7 @@ void  video_set_shadow_mask(const char *name);
 void  video_loadPreset(char *name, bool save);
 
 int   video_get_rotated();
+float video_get_vtime_ms();
 
 void video_cfg_reset();
 
-- 
2.49.0

